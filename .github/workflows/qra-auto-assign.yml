# .github/workflows/qra-auto-assign.yml
name: QRA Auto-Assignment and Review

on:
  issues:
    types: [labeled]
  pull_request:
    types: [opened, synchronize]

jobs:
  assign-qra:
    if: github.event.label.name == 'status:ready-for-review'
    runs-on: ubuntu-latest
    steps:
      - name: Assign QRA to Issue
        uses: actions/github-script@v6
        with:
          script: |
            const issueNumber = context.issue.number;
            
            // Add QRA assignment comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: `## üîç Quality Review Agent Activated
              
              **Review Started**: ${new Date().toISOString()}
              **Expected Completion**: Within 4 hours
              
              ### Review Checklist Initiated:
              - [ ] Code Quality Verification (30 min)
              - [ ] Test Suite Execution (45 min)  
              - [ ] End User Experience Testing (60 min)
              - [ ] Edge Case Testing (45 min)
              - [ ] Documentation Verification (30 min)
              
              The QRA will perform comprehensive testing including:
              - Desktop browsers (Chrome, Firefox, Safari)
              - Mobile devices (iOS, Android)
              - Network conditions (3G, offline)
              - Stress testing (100k+ features)
              - Accessibility compliance
              
              @${context.actor} Your task is now under quality review. No further changes should be made until review completes.`
            });

            // Add QRA label
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              labels: ['qra:in-review']
            });

  run-automated-checks:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgis/postgis:16-3.4
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: gis_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22.11.0'
          
      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run Type Checking
        id: type-check
        run: |
          pnpm type-check 2>&1 | tee type-check.log
          if [ ${PIPESTATUS[0]} -ne 0 ]; then
            echo "‚ùå TypeScript errors found" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat type-check.log >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          echo "‚úÖ TypeScript check passed" >> $GITHUB_STEP_SUMMARY
          
      - name: Run Linting
        id: lint
        run: |
          pnpm lint --format compact 2>&1 | tee lint.log
          if [ ${PIPESTATUS[0]} -ne 0 ]; then
            echo "‚ùå ESLint errors found" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat lint.log >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          echo "‚úÖ Linting passed" >> $GITHUB_STEP_SUMMARY
          
      - name: Run Tests with Coverage
        id: test
        run: |
          pnpm test:coverage --json --outputFile=coverage.json
          COVERAGE=$(cat coverage.json | jq '.total.lines.pct')
          echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
          
          if (( $(echo "$COVERAGE < 85" | bc -l) )); then
            echo "‚ùå Coverage ${COVERAGE}% is below 85% requirement" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          echo "‚úÖ Test coverage: ${COVERAGE}%" >> $GITHUB_STEP_SUMMARY
          
      - name: Run Performance Tests
        id: perf
        run: |
          pnpm test:performance | tee perf.log
          
          # Extract metrics
          SPATIAL_QUERY_TIME=$(grep "Spatial query time:" perf.log | awk '{print $4}')
          MAP_RENDER_TIME=$(grep "Map render time:" perf.log | awk '{print $4}')
          
          echo "### Performance Results" >> $GITHUB_STEP_SUMMARY
          echo "- Spatial Query: ${SPATIAL_QUERY_TIME}ms (limit: 2000ms)" >> $GITHUB_STEP_SUMMARY
          echo "- Map Render: ${MAP_RENDER_TIME}ms (limit: 1000ms)" >> $GITHUB_STEP_SUMMARY
          
      - name: Security Scan
        run: |
          npx audit-ci --high --report-type summary
          
      - name: Build Check
        run: |
          pnpm build
          echo "‚úÖ Build successful" >> $GITHUB_STEP_SUMMARY
          
      - name: Generate QRA Report
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const results = {
              typeCheck: '${{ steps.type-check.outcome }}',
              lint: '${{ steps.lint.outcome }}',
              test: '${{ steps.test.outcome }}',
              coverage: '${{ steps.test.outputs.coverage }}',
              perf: '${{ steps.perf.outcome }}'
            };
            
            const allPassed = Object.values(results).every(r => r === 'success');
            const status = allPassed ? 'PASSED' : 'FAILED';
            
            const comment = `## ü§ñ Automated QRA Checks: ${status}
            
            | Check | Status | Details |
            |-------|---------|---------|
            | TypeScript | ${results.typeCheck === 'success' ? '‚úÖ' : '‚ùå'} | Strict mode compliance |
            | ESLint | ${results.lint === 'success' ? '‚úÖ' : '‚ùå'} | Code quality rules |
            | Tests | ${results.test === 'success' ? '‚úÖ' : '‚ùå'} | Coverage: ${results.coverage}% |
            | Performance | ${results.perf === 'success' ? '‚úÖ' : '‚ùå'} | Within benchmarks |
            | Security | ‚úÖ | No high vulnerabilities |
            | Build | ‚úÖ | Production build success |
            
            ${allPassed ? 
              '### ‚úÖ Ready for manual QRA review' : 
              '### ‚ùå Fix automated check failures before QRA review'
            }
            
            [View full test report](${context.payload.pull_request.html_url}/checks)`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: comment
            });

  notify-human:
    needs: [assign-qra, run-automated-checks]
    if: success()
    runs-on: ubuntu-latest
    steps:
      - name: Schedule Human Review
        uses: actions/github-script@v6
        with:
          script: |
            // Add to project board
            // Send notification to Slack/Discord/Email
            console.log('Human review scheduled after QRA completion');