version: '3.8'

services:
  # Main Orchestration Engine
  orchestration-engine:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: gis-orchestration-engine
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - CONFIG_PATH=/app/configs/orchestration-config.yaml
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - PAGERDUTY_SERVICE_KEY=${PAGERDUTY_SERVICE_KEY}
    ports:
      - "8080:8080"  # Health check endpoint
      - "3001:3001"  # WebSocket communication
    volumes:
      - ./configs:/app/configs:ro
      - ./logs:/app/logs
      - orchestration-data:/app/data
    depends_on:
      - redis
      - prometheus
      - elasticsearch
    networks:
      - gis-orchestration
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and message queuing
  redis:
    image: redis:7-alpine
    container_name: gis-orchestration-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    networks:
      - gis-orchestration
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: gis-orchestration-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - gis-orchestration

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: gis-orchestration-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - gis-orchestration
    depends_on:
      - prometheus

  # Elasticsearch for log aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: gis-orchestration-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - gis-orchestration
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: gis-orchestration-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - gis-orchestration
    depends_on:
      - elasticsearch

  # Logstash for log processing
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: gis-orchestration-logstash
    restart: unless-stopped
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./logs:/app/logs:ro
    networks:
      - gis-orchestration
    depends_on:
      - elasticsearch

  # Agent containers (one per agent type)
  frontend-agent:
    build:
      context: ./agents/frontend
      dockerfile: Dockerfile
    container_name: gis-frontend-agent
    restart: unless-stopped
    environment:
      - AGENT_ID=frontend-ui-agent
      - ORCHESTRATION_ENDPOINT=ws://orchestration-engine:3001
      - AGENT_TYPE=frontend
    networks:
      - gis-orchestration
    depends_on:
      - orchestration-engine

  backend-agent:
    build:
      context: ./agents/backend
      dockerfile: Dockerfile
    container_name: gis-backend-agent
    restart: unless-stopped
    environment:
      - AGENT_ID=backend-api-agent
      - ORCHESTRATION_ENDPOINT=ws://orchestration-engine:3001
      - AGENT_TYPE=backend
    networks:
      - gis-orchestration
    depends_on:
      - orchestration-engine

  database-agent:
    build:
      context: ./agents/database
      dockerfile: Dockerfile
    container_name: gis-database-agent
    restart: unless-stopped
    environment:
      - AGENT_ID=postgis-optimization-agent
      - ORCHESTRATION_ENDPOINT=ws://orchestration-engine:3001
      - AGENT_TYPE=database
      - DATABASE_URL=${DATABASE_URL}
    networks:
      - gis-orchestration
    depends_on:
      - orchestration-engine

  infrastructure-agent:
    build:
      context: ./agents/infrastructure
      dockerfile: Dockerfile
    container_name: gis-infrastructure-agent
    restart: unless-stopped
    environment:
      - AGENT_ID=infrastructure-automation-agent
      - ORCHESTRATION_ENDPOINT=ws://orchestration-engine:3001
      - AGENT_TYPE=infrastructure
      - KUBECONFIG_PATH=/app/kubeconfig
    volumes:
      - ${KUBECONFIG_PATH}:/app/kubeconfig:ro
    networks:
      - gis-orchestration
    depends_on:
      - orchestration-engine

  qa-agent:
    build:
      context: ./agents/quality-assurance
      dockerfile: Dockerfile
    container_name: gis-qa-agent
    restart: unless-stopped
    environment:
      - AGENT_ID=quality-assurance-agent
      - ORCHESTRATION_ENDPOINT=ws://orchestration-engine:3001
      - AGENT_TYPE=quality-assurance
    networks:
      - gis-orchestration
    depends_on:
      - orchestration-engine

  # Backup service
  backup-service:
    image: postgres:15-alpine
    container_name: gis-orchestration-backup
    restart: unless-stopped
    environment:
      - PGPASSWORD=${BACKUP_DB_PASSWORD}
    volumes:
      - ./scripts/backup.sh:/backup.sh:ro
      - backup-data:/backups
    command: >
      sh -c "
        echo '0 2 * * * /backup.sh' | crontab - &&
        crond -f
      "
    networks:
      - gis-orchestration

networks:
  gis-orchestration:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  orchestration-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  elasticsearch-data:
    driver: local
  backup-data:
    driver: local