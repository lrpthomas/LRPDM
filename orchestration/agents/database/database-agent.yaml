apiVersion: orchestration/v1
kind: AgentConfiguration
metadata:
  name: postgis-optimization-agent
  version: 1.0.0
  type: database
spec:
  model:
    identifier: claude-3-5-haiku-20241022
    temperature: 0.1
    maxTokens: 200000
    
  capabilities:
    - SPATIAL_QUERY_OPTIMIZATION
    - INDEX_MANAGEMENT
    - PERFORMANCE_TUNING
    - BACKUP_MANAGEMENT
    - GEOMETRY_PROCESSING
    
  specializations:
    - "PostGIS spatial query optimization"
    - "GIST and SP-GIST index tuning"
    - "Query plan analysis and optimization"
    - "Vacuum and analyze scheduling"
    - "Partitioning strategies for spatial data"
    - "Connection pool optimization"
    
  systemPrompts:
    - role: "PostGIS Performance Engineer"
      context: |
        You are a PostGIS expert specializing in spatial database optimization.
        You understand spatial indexing, query planning, and geometry operations.
        You prioritize query performance while maintaining data integrity.
        You implement best practices for large-scale spatial data management.
      
  constraints:
    mandatory:
      - "ALWAYS use GIST indexes on geometry columns"
      - "ENFORCE ST_IsValid() constraints on geometry data"
      - "USE ST_DWithin() instead of ST_Distance() for proximity"
      - "IMPLEMENT partial indexes for filtered queries"
      - "CREATE BRIN indexes for time-series spatial data"
      - "MAINTAIN table statistics with regular ANALYZE"
    forbidden:
      - "NEVER store invalid geometries"
      - "PROHIBIT unbounded spatial queries"
      - "AVOID ST_Union without ST_Collect consideration"
      - "REJECT queries without proper SRID"
      - "NEVER disable autovacuum on spatial tables"
      
  autonomousCapabilities:
    - task: "Index Creation"
      conditions:
        - "Query patterns analyzed"
        - "Table size < 10GB"
        - "Non-production environment"
      maxComplexity: 80
      requiresConcurrent: true
      
    - task: "Query Optimization"
      conditions:
        - "Execution plan available"
        - "Query runtime > 1 second"
        - "Optimization patterns identified"
      maxComplexity: 75
      
    - task: "Statistics Update"
      conditions:
        - "Table not recently analyzed"
        - "Low database activity"
        - "Statistics drift detected"
      maxComplexity: 30
      
    - task: "Vacuum Operations"
      conditions:
        - "Dead tuple ratio > 20%"
        - "Maintenance window available"
        - "No long-running transactions"
      maxComplexity: 40
      
    - task: "Geometry Simplification"
      conditions:
        - "Vertex count > threshold"
        - "Visualization use case"
        - "Accuracy requirements defined"
      maxComplexity: 60
      
  qualityGates:
    - name: "Query Plan Analysis"
      type: "pre-execution"
      command: "EXPLAIN (ANALYZE, BUFFERS)"
      costThreshold: 10000
      failureAction: "review"
      
    - name: "Index Bloat Check"
      type: "continuous"
      query: |
        SELECT schemaname, tablename, indexname, 
               pg_size_pretty(pg_relation_size(indexrelid)) AS index_size,
               idx_blks_hit::float / (idx_blks_hit + idx_blks_read) AS cache_hit_ratio
        FROM pg_stat_user_indexes
        WHERE idx_blks_read > 0
      threshold: 0.9  # 90% cache hit ratio
      
    - name: "Spatial Validity Check"
      type: "post-execution"
      query: |
        SELECT COUNT(*) FROM {table} 
        WHERE NOT ST_IsValid(geometry)
      expectedValue: 0
      failureAction: "abort"
      
    - name: "Performance Regression Test"
      type: "post-execution"
      benchmarks:
        - "spatial_join_benchmark"
        - "proximity_search_benchmark"
        - "tile_generation_benchmark"
      maxRegression: 10  # percentage
      
  performanceTargets:
    spatialQueryTime: 100      # ms (p95)
    indexCreationTime: 60000   # ms per million rows
    vacuumTime: 30000          # ms per GB
    cacheHitRatio: 0.95        # 95%
    deadTupleRatio: 0.1        # 10%
    
  monitoringQueries:
    - name: "Slow Spatial Queries"
      interval: 300  # seconds
      query: |
        SELECT query, calls, mean_time, max_time
        FROM pg_stat_statements
        WHERE query LIKE '%ST_%'
        AND mean_time > 100
        ORDER BY mean_time DESC
        LIMIT 10
        
    - name: "Table Bloat Analysis"
      interval: 3600  # seconds
      query: |
        SELECT schemaname, tablename,
               pg_size_pretty(pg_total_relation_size(schemaname||'.'||tablename)) AS size,
               n_dead_tup::float / NULLIF(n_live_tup + n_dead_tup, 0) AS dead_ratio
        FROM pg_stat_user_tables
        WHERE n_dead_tup > 1000
        ORDER BY dead_ratio DESC
        
    - name: "Index Usage Statistics"
      interval: 1800  # seconds
      query: |
        SELECT schemaname, tablename, indexname,
               idx_scan, idx_tup_read, idx_tup_fetch
        FROM pg_stat_user_indexes
        WHERE idx_scan = 0
        AND schemaname NOT IN ('pg_catalog', 'information_schema')